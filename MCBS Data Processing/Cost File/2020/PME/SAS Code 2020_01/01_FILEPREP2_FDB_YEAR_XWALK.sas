*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
|      PROGRAM: 01_FILEPREP2_FDB_YEAR_XWALK                                             |
|      UPDATED: 01/05/2010                                                              |
|  INPUT FILES: Current and Last year's FDB files                                       | 
| OUTPUT FILES: MCBSDATA.FDB_XWALK_&LASTYEAR._TO_&CURRYEAR                              |
|  DESCRIPTION: Creates a crosswalk for FDB data between years                          |
|                                                                                       |
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*;
OPTION MLOGIC MPRINT SYMBOLGEN COMPRESS=YES;

%LET CURRYEAR=20;
%LET LASTYEAR=19;
*%let fdbdate   =20210310;         * This is the FDB/NDDF file date;
%let fdbdate   =20210310_wac;         * This is the FDB/NDDF file date for rerun once WAC has been imputed;
*%let fdblast   =20200305;         * This is the FDB/NDDF file date from last year;
%let fdblast   =20200305_wac;         * This is the FDB/NDDF file date from last year for rerun once WAC has been imputed;

%let location = C:\Users\S1C3\RIC PME\MCBS\20&CURRYEAR.\PME\Data\;
%let loc_last = C:\Users\S1C3\RIC PME\MCBS\20&LASTYEAR.\PME\DATA\;
libname  MCBSDATA "&location";
LIBNAME  MCBSLAST "&loc_last";



***CURRENT FDB;
PROC SQL;
CREATE TABLE FDB AS SELECT
F.NDC, F.GCN_SEQNO, F.BN, F.GNN,  F.STR,  F.FORM,  F.RT, F.STR1, F.STR2, 
X.MCBS_FORM_CODE, X.MCBS_FORM
FROM MCBSDATA.FDB_&FDBDATE F 
LEFT JOIN MCBSDATA.ROUTE_FORM_XWALK_&CURRYEAR X ON F.GCDF = X.GCDF AND F.GCRT = X.GCRT;
QUIT;
data fdb;set fdb;
if str ='' then str='-1';
if str1 =. then str1=-1;
if str2 =. then str2=-1;
run;


***LAST YEAR'S FDB;
PROC SQL;
CREATE TABLE FDB_LAST AS SELECT
F.NDC, F.GCN_SEQNO, F.BN, F.GNN,  F.STR,  F.FORM,  F.RT, F.STR1, F.STR2, 
X.MCBS_FORM_CODE, X.MCBS_FORM
FROM MCBSLAST.FDB_&FDBLAST F 
LEFT JOIN MCBSDATA.ROUTE_FORM_XWALK_&CURRYEAR X ON F.GCDF = X.GCDF AND F.GCRT = X.GCRT;
QUIT;
data fdb_LAST;set fdb_LAST;
if str ='' then str='-1';
if str1 =. then str1=-1;
if str2 =. then str2=-1;
run;



***MERGE OLD AND NEW FDW BY NDC AND ADD CLAIM COUNTS;
PROC SQL;
CREATE TABLE FDB_MERGED_NDC AS SELECT 
 case when B.NDC is not null then B.NDC else A.NDC end AS   NDC,
 A.BN        AS   BN_LAST,
 A.GNN       AS   GNN_LAST,
 A.STR       AS   STR_LAST,
 A.MCBS_FORM AS   MCBS_FORM_LAST,
 A.MCBS_FORM_CODE AS   MCBS_FORM_CODE_LAST,

 B.BN ,
 B.GNN ,
 B.STR ,
 B.MCBS_FORM,
 B.MCBS_FORM_CODE,

 C1.CLAIMS AS CLAIMS_LAST,
 C2.CLAIMS AS CLAIMS

FROM FDB_LAST A 
  FULL JOIN FDB B ON A.NDC=B.NDC
  LEFT JOIN MCBSLAST.PDE_NDC_COUNTS_&LASTYEAR C1 ON A.NDC=C1.NDC
  LEFT JOIN MCBSDATA.PDE_NDC_COUNTS_&CURRYEAR C2 ON B.NDC=C2.NDC;
;

SELECT COUNT(*) FROM FDB_MERGED_NDC WHERE BN_LAST IS NULL;
SELECT COUNT(*) FROM FDB_MERGED_NDC WHERE BN IS NULL;
QUIT;


***SELECT DISTINCT OLD AND NEW BRAND NAME COMBINATIONS, PLUS GET CLAIM COUNTS;
PROC SQL;
CREATE TABLE FDB_MERGED_BN AS SELECT 
 BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST,
 BN,      GNN ,     STR ,     MCBS_FORM,      MCBS_FORM_CODE,
 SUM(CLAIMS_LAST) AS CLAIMS_LAST,
 SUM(CLAIMS)      AS CLAIMS
FROM FDB_MERGED_NDC
GROUP BY  BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST,
          BN,      GNN ,     STR ,     MCBS_FORM,      MCBS_FORM_CODE
ORDER BY BN_LAST, BN;

TITLE "PRODUCTS NO LONGER AVAILABLE";
  SELECT COUNT(*) AS BNS, SUM(CLAIMS_LAST) as CLAIMS_LAST, SUM(CLAIMS) as CLAIMS 
  FROM FDB_MERGED_BN WHERE BN IS NULL;TITLE;
TITLE "NEW NDC PRODUCTS";
  SELECT COUNT(*) AS BNS, SUM(CLAIMS_LAST) as CLAIMS_LAST, SUM(CLAIMS) as CLAIMS 
  FROM FDB_MERGED_BN WHERE BN_LAST IS NULL;TITLE;
QUIT;

***NEED TO KEEP ALL NEW RECORDS, SO RECODE OLD NAME IF MISSING;
DATA FDB_MERGED_BN; SET FDB_MERGED_BN;
IF        BN_LAST='' THEN DO;
 BN_LAST=BN;
 GNN_LAST=GNN;
 STR_LAST=STR;
 MCBS_FORM_LAST=MCBS_FORM;
 MCBS_FORM_CODE_LAST=MCBS_FORM_CODE;
END;

RUN;

PROC SORT DATA=FDB_MERGED_BN; BY BN_LAST GNN_LAST STR_LAST MCBS_FORM_LAST MCBS_FORM_CODE_LAST;RUN;


***THIS FURTHER REMOVES DUPLICATES AFTER RECODING, PLUS REMOVES DUPS WHERE OLD NAME IS A DUP BUT NEW NAME IS MISSING;

*ROLL UP PURE DUPLICATES;
PROC SQL;
CREATE TABLE FDB_MERGED_BN2  AS SELECT
 BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST,
 BN,      GNN ,     STR ,     MCBS_FORM,      MCBS_FORM_CODE,
 SUM(CLAIMS_LAST) AS CLAIMS_LAST,
 sum(claims) as claims
FROM FDB_MERGED_BN 
GROUP BY BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST,
         BN,      GNN ,     STR ,     MCBS_FORM,      MCBS_FORM_CODE;

*CREATE COUNTER FOR REMAINING DUPS FROM PRIOR YEAR;
CREATE TABLE COUNTS AS SELECT BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST,COUNT(BN_LAST) AS OLD_COUNT 
 FROM FDB_MERGED_BN2 GROUP BY BN_LAST, GNN_LAST, STR_LAST, MCBS_FORM_LAST, MCBS_FORM_CODE_LAST; 

*MERGE COUNTER TO DATA;
CREATE TABLE FDB_MERGED_BN3 AS SELECT 
A.*, B.OLD_COUNT 
FROM FDB_MERGED_BN2 A FULL JOIN COUNTS B ON 
A.BN_LAST=B.BN_LAST 
AND A.BN_LAST=B.BN_LAST
AND A.GNN_LAST=B.GNN_LAST
AND A.STR_LAST=B.STR_LAST
AND A.MCBS_FORM_LAST=B.MCBS_FORM_LAST
AND A.MCBS_FORM_CODE_LAST=B.MCBS_FORM_CODE_LAST;
QUIT;

*REMOVE DUPLICATES THAT MATCH TO DRUGS NO LONGER AVAILABLE;
DATA FDB_MERGED_BN3; SET FDB_MERGED_BN3;
IF BN='' AND OLD_COUNT >1 THEN DELETE;
DROP OLD_COUNT ;
RUN;

*REMOVE REMAINING DUPLICATES FROM PRIOR YEAR BY PICKING MATCH WITH MOST CLAIMS;
PROC SORT DATA=FDB_MERGED_BN3; 
BY BN_LAST GNN_LAST STR_LAST MCBS_FORM_LAST MCBS_FORM_CODE_LAST DESCENDING CLAIMS DESCENDING CLAIMS_LAST;
RUN;
PROC SORT DATA=FDB_MERGED_BN3 NODUPKEY; 
BY BN_LAST GNN_LAST STR_LAST MCBS_FORM_LAST MCBS_FORM_CODE_LAST;
RUN;

DATA MCBSDATA.FDB_XWALK_&LASTYEAR._TO_&CURRYEAR; 
set FDB_MERGED_BN3;
run;

PROC SQL;
TITLE "PRODUCTS NO LONGER AVAILABLE";
  SELECT COUNT(*) AS BNS, SUM(CLAIMS_LAST) as CLAIMS_LAST, SUM(CLAIMS) as CLAIMS 
  FROM MCBSDATA.FDB_XWALK_&LASTYEAR._TO_&CURRYEAR WHERE BN IS NULL;TITLE;
QUIT;








